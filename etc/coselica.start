// Copyright (C) 2010 - DIGITEO

// This file is released into the public domain

mprintf("Start COSELICA module\n");

if isdef("cos_mech_translib") then
	warning("COSELICA module is already loaded");
	return;
end

etc_tlbx  = get_absolute_file_path("coselica.start");
etc_tlbx  = getshortpathname(etc_tlbx);
root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

//Load  functions library
// =============================================================================
mprintf("\tLoad macros\n");
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Utils/";
cos_utils_lib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Continuous/";
cos_blocks_contlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Nonlinear/";
cos_blocks_nllib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Interfaces/";
cos_blocks_interflib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Math/";
cos_blocks_mathlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Routing/";
cos_blocks_routlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Blocks/Sources/";
cos_blocks_srcslib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Thermal/HeatTransfer/";
cos_thermal_heattlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Electrical/";
cos_eleclib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Mechanics/Rotational/";
cos_mech_rotlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Mechanics/Planar/";
cos_mech_planlib = lib(pathmacros);
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "Mechanics/Translational/";
cos_mech_translib = lib(pathmacros);

clear pathmacros;

// load xcos libraries
// =============================================================================
loadXcosLibs();

// load palette
// =============================================================================
function xpal = tbx_build_pal(toolbox_dir, name, interfaces)
  h5_instances = toolbox_dir + filesep() + "images/h5/" + interfaces + ".h5";
  pal_icons = toolbox_dir + filesep() + "images/gif/" + interfaces + ".gif";
  graph_icons = toolbox_dir + filesep() + "images/svg/" + interfaces + ".svg";

  xpal = xcosPal(name);

  for i=1:size(interfaces,1)
     // register to the palette.
    xpal = xcosPalAddBlock(xpal, h5_instances(i), pal_icons(i), graph_icons(i));
  end
endfunction

mprintf("\tLoad palette: Coselica - Blocks\n");
exec(etc_tlbx+"blocks.sce", -1);

mprintf("\tLoad palette: Coselica - Electrical\n");
exec(etc_tlbx+"electrical.sce", -1);

mprintf("\tLoad palette: Coselica - Heat transfer\n");
exec(etc_tlbx+"thermal_heattransfer.sce", -1);

mprintf("\tLoad palette: Coselica - Mechanics/Translational\n");
exec(etc_tlbx+"mechanics_translational.sce", -1);

mprintf("\tLoad palette: Coselica - Mechanics/Rotational\n");
exec(etc_tlbx+"mechanics_rotational.sce", -1);

mprintf("\tLoad palette: Coselica - Mechanics/Planar\n");
exec(etc_tlbx+"mechanics_planar.sce", -1);

// Load demos
// =============================================================================
if or(getscilabmode() == ["NW";"STD"]) then
    mprintf("\tLoad demos\n");
    pathdemos = pathconvert(root_tlbx+"/demos/coselica.dem.gateway.sce", %F, %T);
    add_demo("Coselica", pathdemos);
end

// Update modelica library path
mprintf("\tLoad Modelica Equations\n");

// Display version
mprintf("\tCoselica Version: "+getCoselicaVersion());

global %MODELICA_USER_LIBS;
%MODELICA_USER_LIBS = [%MODELICA_USER_LIBS ; root_tlbx+"/macros"];

clear root_tlbx;
clear etc_tlbx;
